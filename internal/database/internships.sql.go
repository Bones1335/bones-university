// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: internships.sql

package database

import (
	"context"
)

const createInternships = `-- name: CreateInternships :one
INSERT INTO internships (
  internships_id,
  business_name,
  num_spots,
  business_address,
  business_city,
  business_postal_code,
  business_state,
  business_country,
  business_phone_number,
  business_email,
  business_type
)
VALUES (
  gen_random_uuid(),
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10
)
RETURNING internships_id, business_name, num_spots, business_address, business_city, business_postal_code, business_state, business_country, business_phone_number, business_email, business_type
`

type CreateInternshipsParams struct {
	BusinessName        string `json:"business_name"`
	NumSpots            int16  `json:"num_spots"`
	BusinessAddress     string `json:"business_address"`
	BusinessCity        string `json:"business_city"`
	BusinessPostalCode  int32  `json:"business_postal_code"`
	BusinessState       string `json:"business_state"`
	BusinessCountry     string `json:"business_country"`
	BusinessPhoneNumber string `json:"business_phone_number"`
	BusinessEmail       string `json:"business_email"`
	BusinessType        string `json:"business_type"`
}

func (q *Queries) CreateInternships(ctx context.Context, arg CreateInternshipsParams) (Internship, error) {
	row := q.db.QueryRowContext(ctx, createInternships,
		arg.BusinessName,
		arg.NumSpots,
		arg.BusinessAddress,
		arg.BusinessCity,
		arg.BusinessPostalCode,
		arg.BusinessState,
		arg.BusinessCountry,
		arg.BusinessPhoneNumber,
		arg.BusinessEmail,
		arg.BusinessType,
	)
	var i Internship
	err := row.Scan(
		&i.InternshipsID,
		&i.BusinessName,
		&i.NumSpots,
		&i.BusinessAddress,
		&i.BusinessCity,
		&i.BusinessPostalCode,
		&i.BusinessState,
		&i.BusinessCountry,
		&i.BusinessPhoneNumber,
		&i.BusinessEmail,
		&i.BusinessType,
	)
	return i, err
}
