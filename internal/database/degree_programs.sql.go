// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: degree_programs.sql

package database

import (
	"context"
)

const createDegreePrograms = `-- name: CreateDegreePrograms :one
INSERT INTO degree_programs (
  degrees_id, 
  created_at,
  updated_at,
  degree_name,
  degree_level,
  degree_department,
  degree_duration
)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4
)
RETURNING degrees_id, created_at, updated_at, degree_name, degree_level, degree_department, degree_duration
`

type CreateDegreeProgramsParams struct {
	DegreeName       string `json:"degree_name"`
	DegreeLevel      string `json:"degree_level"`
	DegreeDepartment string `json:"degree_department"`
	DegreeDuration   int16  `json:"degree_duration"`
}

func (q *Queries) CreateDegreePrograms(ctx context.Context, arg CreateDegreeProgramsParams) (DegreeProgram, error) {
	row := q.db.QueryRowContext(ctx, createDegreePrograms,
		arg.DegreeName,
		arg.DegreeLevel,
		arg.DegreeDepartment,
		arg.DegreeDuration,
	)
	var i DegreeProgram
	err := row.Scan(
		&i.DegreesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DegreeName,
		&i.DegreeLevel,
		&i.DegreeDepartment,
		&i.DegreeDuration,
	)
	return i, err
}

const getDegrees = `-- name: GetDegrees :many
SELECT degrees_id, created_at, updated_at, degree_name, degree_level, degree_department, degree_duration FROM degree_programs
`

func (q *Queries) GetDegrees(ctx context.Context) ([]DegreeProgram, error) {
	rows, err := q.db.QueryContext(ctx, getDegrees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DegreeProgram
	for rows.Next() {
		var i DegreeProgram
		if err := rows.Scan(
			&i.DegreesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DegreeName,
			&i.DegreeLevel,
			&i.DegreeDepartment,
			&i.DegreeDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
